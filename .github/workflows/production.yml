name: Production

on:
  push:
    tags:
      - v*

concurrency:
  group: preproduction
  cancel-in-progress: true

jobs:
  ##############################################################################
  ## BUILD AND REGISTER BACKEND IMAGE
  ##############################################################################
  register-backend:
    name: Build & Register application
    runs-on: ubuntu-latest
    steps:

    - name: Get project name
      run: |
        echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

    - name: Use autodevops build and register
      uses: SocialGouv/actions/autodevops-build-register@master
      with:
        project: ${{ env.project }}
        token: ${{ secrets.GITHUB_TOKEN }}
        imageName: ${{ env.project }}/backend
        dockercontext: ./back-strapi
        dockerfile: ./back-strapi/Dockerfile

  # register-backend:
  #   name: Register backend
  #   runs-on: ubuntu-latest
  #   steps:

      # - name: Checkout repository
      #   uses: actions/checkout@v2

      # - name: Get project name
      #   run: |
      #     echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      # - name: Create image labels and tags
      #   id: docker_meta
      #   uses: "crazy-max/ghaction-docker-meta@2e1a5c7fa42123697f82d479b551a1bbdb1bef88"
      #   with:
      #     images: ghcr.io/socialgouv/${{ env.project }}/backend
      #     labels: |
      #       org.opencontainers.image.title=backend
      #       org.opencontainers.image.documentation=https://github.com/SocialGouv/${{ env.project }}/tree/${{ github.sha }}
      #     tags: |
      #       type=sha
      #       type=ref,event=pr
      #       type=ref,event=branch
      #       type=semver,pattern={{version}}
      #       type=raw,value=sha-${{ github.sha }}
      #       type=semver,pattern={{major}}.{{minor}}

      # - name: Set up Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@master
      #   with:
      #     install: true

      # - name: Registry authentication
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Set buildx cache up
      #   uses: "actions/cache@v2"
      #   with:
      #     key: "${{ runner.os }}-buildx-backend-${{ hashFiles('back-strapi/Dockerfile') }}"
      #     path: /tmp/.buildx-backend-cache
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-backend

      # - name: Image build and register
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./back-strapi
      #     push: "true"
      #     builder: ${{ steps.buildx.outputs.name }}
      #     tags: "${{ steps.docker_meta.outputs.tags }}"
      #     labels: "${{ steps.docker_meta.outputs.labels }}"
      #     cache-to: "type=local,dest=/tmp/.buildx-backend-cache"
      #     cache-from: "type=local,src=/tmp/.buildx-backend-cache"

  ##############################################################################
  ## BUILD AND REGISTER FRONTEND IMAGE
  ##############################################################################
  register-frontend-guyane:
    name: Register frontend Guyane
    runs-on: ubuntu-latest
    steps:

    - name: Get project name
      run: |
        echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

    - name: Use autodevops build and register
      uses: SocialGouv/actions/autodevops-build-register@docker-build-args
      with:
        project: ${{ env.project }}
        token: ${{ secrets.GITHUB_TOKEN }}
        imageName: ${{ env.project }}/frontend-guyane
        dockercontext: ./tumeplay-app
        dockerfile: ./tumeplay-app/Dockerfile
        dockerbuildargs: |
          buildenv=preprod.guyane
          REACT_APP_API_URL=%%REACT_APP_API_URL%%
          REACT_APP_ZONE=%%REACT_APP_ZONE%%
          REACT_APP_OTHER_ZONE_URL=%%REACT_APP_OTHER_ZONE_URL%%

  ##############################################################################
  ## BUILD AND REGISTER FRONTEND GUYANE
  ##############################################################################
  register-frontend-metropole:
    name: Register frontend Metropole
    runs-on: ubuntu-latest
    steps:

    - name: Get project name
      run: |
        echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

    - name: Use autodevops build and register
      uses: SocialGouv/actions/autodevops-build-register@docker-build-args
      with:
        project: ${{ env.project }}
        token: ${{ secrets.GITHUB_TOKEN }}
        imageName: ${{ env.project }}/frontend-metropole
        dockercontext: ./tumeplay-app
        dockerfile: ./tumeplay-app/Dockerfile
        dockerbuildargs: |
          buildenv=preprod.metropole
          REACT_APP_API_URL=%%REACT_APP_API_URL%%
          REACT_APP_ZONE=%%REACT_APP_ZONE%%
          REACT_APP_OTHER_ZONE_URL=%%REACT_APP_OTHER_ZONE_URL%%

  # register-frontend-guyane:
  #   name: Register front-end
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Get project name
  #       run: |
  #         echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

  #     - name: Create image labels and tags
  #       id: docker_meta
  #       uses: "crazy-max/ghaction-docker-meta@2e1a5c7fa42123697f82d479b551a1bbdb1bef88"
  #       with:
  #         images: ghcr.io/socialgouv/${{ env.project }}/frontend-guyane
  #         labels: |
  #           org.opencontainers.image.title=frontend-guyane
  #           org.opencontainers.image.documentation=https://github.com/SocialGouv/${{ env.project }}/tree/${{ github.sha }}
  #         tags: |
  #           type=sha
  #           type=ref,event=pr
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
  #           type=raw,value=sha-${{ github.sha }}
  #           type=semver,pattern={{major}}.{{minor}}

  #     - name: Set up Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@master
  #       with:
  #         install: true

  #     - name: Registry authentication
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set buildx cache up
  #       uses: "actions/cache@v2"
  #       with:
  #         key: "${{ runner.os }}-buildx-frontend-guyane-${{ hashFiles('tumeplay-app/Dockerfile') }}"
  #         path: /tmp/.buildx-frontend-guyane-cache
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-frontend-guyane

  #     - name: Image build and register
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ./tumeplay-app
  #         push: "true"
  #         builder: ${{ steps.buildx.outputs.name }}
  #         tags: "${{ steps.docker_meta.outputs.tags }}"
  #         labels: "${{ steps.docker_meta.outputs.labels }}"
  #         cache-to: "type=local,dest=/tmp/.buildx-frontend-guyane-cache"
  #         cache-from: "type=local,src=/tmp/.buildx-frontend-guyane-cache"
  #         build-args: |
  #           buildenv=preprod.guyane
  #           REACT_APP_API_URL=%%REACT_APP_API_URL%%
  #           REACT_APP_ZONE=%%REACT_APP_ZONE%%
  #           REACT_APP_OTHER_ZONE_URL=%%REACT_APP_OTHER_ZONE_URL%%
  #           REACT_APP_MATOMO_ID=%%REACT_APP_MATOMO_ID%%

  # register-frontend-metropole:
  #   name: Register front-end
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Get project name
  #       run: |
  #         echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

  #     - name: Create image labels and tags
  #       id: docker_meta
  #       uses: "crazy-max/ghaction-docker-meta@2e1a5c7fa42123697f82d479b551a1bbdb1bef88"
  #       with:
  #         images: ghcr.io/socialgouv/${{ env.project }}/frontend-metropole
  #         labels: |
  #           org.opencontainers.image.title=frontend-metropole
  #           org.opencontainers.image.documentation=https://github.com/SocialGouv/${{ env.project }}/tree/${{ github.sha }}
  #         tags: |
  #           type=sha
  #           type=ref,event=pr
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
  #           type=raw,value=sha-${{ github.sha }}
  #           type=semver,pattern={{major}}.{{minor}}

  #     - name: Set up Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@master
  #       with:
  #         install: true

  #     - name: Registry authentication
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set buildx cache up
  #       uses: "actions/cache@v2"
  #       with:
  #         key: "${{ runner.os }}-buildx-frontend-metropole-${{ hashFiles('tumeplay-app/Dockerfile') }}"
  #         path: /tmp/.buildx-frontend-metropole-cache
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-frontend-metropole

  #     - name: Image build and register
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ./tumeplay-app
  #         push: "true"
  #         builder: ${{ steps.buildx.outputs.name }}
  #         tags: "${{ steps.docker_meta.outputs.tags }}"
  #         labels: "${{ steps.docker_meta.outputs.labels }}"
  #         cache-to: "type=local,dest=/tmp/.buildx-frontend-metropole-cache"
  #         cache-from: "type=local,src=/tmp/.buildx-frontend-metropole-cache"
  #         build-args: |
  #           buildenv=preprod.metropole
  #           REACT_APP_API_URL=%%REACT_APP_API_URL%%
  #           REACT_APP_ZONE=%%REACT_APP_ZONE%%
  #           REACT_APP_OTHER_ZONE_URL=%%REACT_APP_OTHER_ZONE_URL%%
  #           REACT_APP_MATOMO_ID=%%REACT_APP_MATOMO_ID%%

  ##############################################################################
  ## GENERATE PREPROD KUBERNETES MANIFESTS
  ##############################################################################
  manifests-preproduction:
    name: Preproduction manifests
    runs-on: ubuntu-latest
    steps:

    - name: Use autodevops manifests generation
      uses: SocialGouv/actions/k8s-manifests@master
      with:
        environment: "preprod"

  # manifests-preproduction:
  #   name: Generate preprod manifests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Load review environment variables
  #       run: |
  #         cat ".github/preproduction.env" >> $GITHUB_ENV

  #     - name: Yarn cache setup
  #       uses: c-hive/gha-yarn-cache@v2

  #     - name: Install kosko-charts dependencies
  #       run: yarn --cwd .k8s install --frozen-lockfile --prefer-offline

  #     - name: Generate preproduction manifests
  #       run: yarn --cwd .k8s --silent generate:preprod > manifests-preproduction.yml
  #       env:
  #         SOCIALGOUV_PREPRODUCTION: true
  #         SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

  #     - name: Generate preproduction namespace
  #       run: yarn --cwd .k8s --silent generate:preprod _namespace > namespace-preproduction.yml
  #       env:
  #         SOCIALGOUV_PREPRODUCTION: true
  #         RANCHER_PROJECT_ID: ${{ env.RANCHER_PROJECT_ID }}
  #         SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

  #     - name: Archive preproduction manifests
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: manifests-preproduction.yml
  #         path: manifests-preproduction.yml

  #     - name: Archive preproduction namespace
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: namespace-preproduction.yml
  #         path: namespace-preproduction.yml

  ##############################################################################
  ## DEPLOY BACKEND & FRONT-END TO PREPRODUCTION
  ##############################################################################
  deploy-preproduction:
    name: Deploy preproduction
    runs-on: ubuntu-latest
    needs:
      [
        register-backend,
        register-frontend-guyane,
        register-frontend-metropole,
        manifests-preproduction,
      ]
    environment:
      name: preproduction
      url: https://backend-${{ env.namespace }}.${{ env.SOCIALGOUV_BASE_DOMAIN }}
    steps:

    - name: Use autodevops deployment
      uses: SocialGouv/actions/autodevops-deploy@master
      with:
        environment: "preprod"
        token: ${{ secrets.GITHUB_TOKEN }}
        kubeconfig: ${{ secrets.SOCIALGOUV_KUBE_CONFIG_DEV2 }}

      # - name: Checkout repository
      #   uses: actions/checkout@v2

      # - name: Get project and namespace names
      #   run: |
      #     cat ".github/preproduction.env" >> $GITHUB_ENV
      #     echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      #     echo "namespace=${GITHUB_REPOSITORY#*/}-preprod" >> $GITHUB_ENV

      # - name: Download k8s manifests
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: manifests-preproduction.yml

      # - name: Download k8s namespace
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: namespace-preproduction.yml

      # - name: Install Kapp
      #   uses: vmware-tanzu/carvel-setup-action@v1
      #   with:
      #     only: kapp
      #     token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create kubernetes config
      #   run: |
      #     mkdir ~/.kube
      #     touch ~/.kube/config
      #     echo ${{ secrets.SOCIALGOUV_KUBE_CONFIG_DEV2 }} | base64 -d > ~/.kube/config

      # - name: Create preproduction namespace
      #   run: kubectl create -f namespace-preproduction.yml || true

      # - name: Deploy application
      #   run: kapp --dangerous-override-ownership-of-existing-resources -y deploy -a ${{ env.project }} --namespace ${{ env.namespace }} -f manifests-preproduction.yml

  ##############################################################################
  ## GENERATE PROD KUBERNETES MANIFESTS
  ##############################################################################
  manifests-production:
    name: Production manifests
    runs-on: ubuntu-latest
    steps:

    - name: Use autodevops manifests generation
      uses: SocialGouv/actions/k8s-manifests@master
      with:
        environment: "prod"

      # - name: Checkout repository
      #   uses: actions/checkout@v2

      # - name: Load review environment variables
      #   run: |
      #     cat ".github/production.env" >> $GITHUB_ENV

      # - name: Yarn cache setup
      #   uses: c-hive/gha-yarn-cache@v2

      # - name: Install kosko-charts dependencies
      #   run: yarn --cwd .k8s install --frozen-lockfile --prefer-offline

      # - name: Generate production manifests
      #   run: yarn --cwd .k8s --silent generate:prod > manifests-production.yml
      #   env:
      #     SOCIALGOUV_PRODUCTION: true
      #     SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

      # - name: Archive production manifests
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: manifests-production.yml
      #     path: manifests-production.yml

  ##############################################################################
  ## DEPLOY BACKEND & FRONT-END TO PRODUCTION
  ##############################################################################
  deploy-production:
    name: Deploy production
    runs-on: ubuntu-latest
    needs: [deploy-preproduction, manifests-production]
    environment:
      name: production
      url: https://backend-${{ env.namespace }}.${{ env.SOCIALGOUV_BASE_DOMAIN }}
    steps:

    - name: Use autodevops deployment
      uses: SocialGouv/actions/autodevops-deploy@master
      with:
        environment: "prod"
        token: ${{ secrets.GITHUB_TOKEN }}
        kubeconfig: ${{ secrets.SOCIALGOUV_KUBE_CONFIG_PROD }}

      # - name: Checkout repository
      #   uses: actions/checkout@v2

      # - name: Get project and namespace names
      #   run: |
      #     cat ".github/production.env" >> $GITHUB_ENV
      #     echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      #     echo "namespace=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      # - name: Download production manifests
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: manifests-production.yml

      # - name: Install Kapp
      #   uses: vmware-tanzu/carvel-setup-action@v1
      #   with:
      #     only: kapp
      #     token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create kubernetes config
      #   run: |
      #     mkdir ~/.kube
      #     touch ~/.kube/config
      #     echo ${{ secrets.SOCIALGOUV_KUBE_CONFIG_PROD }} | base64 -d > ~/.kube/config

      # - name: Deploy application
      #   run: |
      #     kapp --dangerous-override-ownership-of-existing-resources \
      #     -y deploy \
      #     -a ${{ env.project }} \
      #     --namespace tumeplay \
      #     -f manifests-production.yml
